import { Type } from './type';
import { Observable } from 'ims-rxjs';
export declare type AllTypes = 'array' | 'null' | 'undefined' | 'object' | 'number' | 'string' | 'symbol' | 'symbol' | 'boolean' | 'function' | 'regexp' | 'date' | 'arguments' | 'error' | 'weakmap' | 'map' | 'set' | 'weakset' | 'bigint';
export declare function getType(val: any): AllTypes;
export declare function isNumber(v: any): v is number;
export declare function isUndefined(v: any): v is undefined;
export declare function isNull(v: any): v is null;
export declare function isNullOrUndefined(v: any): v is undefined | null;
export declare const isArray: (arg: any) => arg is any[];
export declare function isObject(v: any): v is object;
export declare function isFunction(v: any): v is Function;
export declare function isEmpty(v: any): boolean;
export declare function hasProperty(v: any, key: any): boolean;
export declare function getProperty(v: any, key: any): any;
export declare function strictGetProperty(v: any, key: any, _default?: any): any;
export declare function setProperty(v: any, key: any, value: any): boolean;
export declare function strictsetProperty(v: any, key: any, value: any): void;
export declare function strictIsFunction(v: any, key: any): boolean;
export declare function strictIsArray(v: any, key: any): boolean;
export declare function isObjectLike(v: any): v is object;
export declare function isBoolean(v: any): v is boolean;
export declare function isString(v: any): v is string;
export declare function isOrigin(val?: any): val is Function | String | Object | Array<any> | Date;
export declare function getExtends(type: Type<any>): any | false;
export declare function isTrue(v: any): v is true;
export declare function isFalse(v: any): v is false;
export declare const keys: (o: {}) => string[];
export declare function uuid4(): string;
export declare function isPromise<T = any>(v: any): v is Promise<T>;
export declare function isObservable<T = any>(v: any): v is Observable<T>;
export declare const isNaN: (number: number) => boolean;
export declare const isNan: (number: number) => boolean;
export declare function isMap<K = any, V = any>(v: any): v is Map<K, V>;
export declare function isSet<V = any>(v: any): v is Set<V>;
